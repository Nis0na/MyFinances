# Generated by Django 5.1.4 on 2025-01-01 17:51

import backend.data.default_email_templates
import core.models
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import shortuuid.django_fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0002_client"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="InvoiceItem",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=100)),
                ("is_service", models.BooleanField(default=True)),
                ("hours", models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ("price_per_hour", models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ("price", models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="FileStorageFile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("file", models.FileField(storage=core.models._private_storage, upload_to=core.models.upload_to_user_separate_folder)),
                ("file_uri_path", models.CharField(max_length=500)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_edited_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="files_edited",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FinanceDefaultValues",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                ("invoice_due_date_value", models.PositiveSmallIntegerField(default=7)),
                (
                    "invoice_due_date_type",
                    models.CharField(
                        choices=[("days_after", "Days After"), ("date_following", "Date Following"), ("date_current", "Date Current")],
                        default="days_after",
                        max_length=20,
                    ),
                ),
                ("invoice_date_value", models.PositiveSmallIntegerField(default=15)),
                (
                    "invoice_date_type",
                    models.CharField(
                        choices=[("day_of_month", "Day Of Month"), ("days_after", "Days After")], default="day_of_month", max_length=20
                    ),
                ),
                ("invoice_from_name", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_company", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_address", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_city", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_county", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_country", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_from_email", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_account_number", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_sort_code", models.CharField(blank=True, max_length=100, null=True)),
                ("invoice_account_holder_name", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "email_template_recurring_invoices_invoice_created",
                    models.TextField(
                        default=backend.data.default_email_templates.recurring_invoices_invoice_created_default_email_template
                    ),
                ),
                (
                    "email_template_recurring_invoices_invoice_overdue",
                    models.TextField(
                        default=backend.data.default_email_templates.recurring_invoices_invoice_overdue_default_email_template
                    ),
                ),
                (
                    "email_template_recurring_invoices_invoice_cancelled",
                    models.TextField(
                        default=backend.data.default_email_templates.recurring_invoices_invoice_cancelled_default_email_template
                    ),
                ),
                (
                    "default_invoice_logo",
                    models.ImageField(blank=True, null=True, storage=core.models._private_storage, upload_to="invoice_logos/"),
                ),
                (
                    "client",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name="default_values", to="core.client"
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InvoiceProduct",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=100)),
                ("quantity", models.IntegerField()),
                ("rate", models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InvoiceRecurringProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("boto_schedule_arn", models.CharField(blank=True, max_length=2048, null=True)),
                ("boto_schedule_uuid", models.UUIDField(blank=True, default=None, null=True)),
                ("boto_last_updated", models.DateTimeField(auto_now=True)),
                ("received", models.BooleanField(default=False)),
                (
                    "boto_schedule_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("creating", "Creating"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("deleting", "Deleting"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=100,
                    ),
                ),
                ("client_name", models.CharField(blank=True, max_length=100, null=True)),
                ("client_email", models.EmailField(blank=True, max_length=254, null=True)),
                ("client_company", models.CharField(blank=True, max_length=100, null=True)),
                ("client_address", models.CharField(blank=True, max_length=100, null=True)),
                ("client_city", models.CharField(blank=True, max_length=100, null=True)),
                ("client_county", models.CharField(blank=True, max_length=100, null=True)),
                ("client_country", models.CharField(blank=True, max_length=100, null=True)),
                ("client_is_representative", models.BooleanField(default=False)),
                ("self_name", models.CharField(blank=True, max_length=100, null=True)),
                ("self_company", models.CharField(blank=True, max_length=100, null=True)),
                ("self_address", models.CharField(blank=True, max_length=100, null=True)),
                ("self_city", models.CharField(blank=True, max_length=100, null=True)),
                ("self_county", models.CharField(blank=True, max_length=100, null=True)),
                ("self_country", models.CharField(blank=True, max_length=100, null=True)),
                ("sort_code", models.CharField(blank=True, max_length=8, null=True)),
                ("account_holder_name", models.CharField(blank=True, max_length=100, null=True)),
                ("account_number", models.CharField(blank=True, max_length=100, null=True)),
                ("vat_number", models.CharField(blank=True, max_length=100, null=True)),
                ("logo", models.ImageField(blank=True, null=True, storage=core.models._private_storage, upload_to="invoice_logos")),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_issued", models.DateField(blank=True, null=True)),
                ("discount_amount", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MaxValueValidator(100)]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "status",
                    models.CharField(
                        choices=[("ongoing", "Ongoing"), ("paused", "paused"), ("cancelled", "cancelled")], default="paused", max_length=10
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[("weekly", "Weekly"), ("monthly", "Monthly"), ("yearly", "Yearly")], default="monthly", max_length=20
                    ),
                ),
                ("end_date", models.DateField(blank=True, null=True)),
                ("due_after_days", models.PositiveSmallIntegerField(default=7)),
                ("day_of_week", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("day_of_month", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("month_of_year", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("client_to", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.client")),
                ("items", models.ManyToManyField(blank=True, to="backend.invoiceitem")),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("with_items", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("client_name", models.CharField(blank=True, max_length=100, null=True)),
                ("client_email", models.EmailField(blank=True, max_length=254, null=True)),
                ("client_company", models.CharField(blank=True, max_length=100, null=True)),
                ("client_address", models.CharField(blank=True, max_length=100, null=True)),
                ("client_city", models.CharField(blank=True, max_length=100, null=True)),
                ("client_county", models.CharField(blank=True, max_length=100, null=True)),
                ("client_country", models.CharField(blank=True, max_length=100, null=True)),
                ("client_is_representative", models.BooleanField(default=False)),
                ("self_name", models.CharField(blank=True, max_length=100, null=True)),
                ("self_company", models.CharField(blank=True, max_length=100, null=True)),
                ("self_address", models.CharField(blank=True, max_length=100, null=True)),
                ("self_city", models.CharField(blank=True, max_length=100, null=True)),
                ("self_county", models.CharField(blank=True, max_length=100, null=True)),
                ("self_country", models.CharField(blank=True, max_length=100, null=True)),
                ("sort_code", models.CharField(blank=True, max_length=8, null=True)),
                ("account_holder_name", models.CharField(blank=True, max_length=100, null=True)),
                ("account_number", models.CharField(blank=True, max_length=100, null=True)),
                ("vat_number", models.CharField(blank=True, max_length=100, null=True)),
                ("logo", models.ImageField(blank=True, null=True, storage=core.models._private_storage, upload_to="invoice_logos")),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_issued", models.DateField(blank=True, null=True)),
                ("discount_amount", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2, default=0, max_digits=5, validators=[django.core.validators.MaxValueValidator(100)]
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("reference", models.CharField(blank=True, max_length=16, null=True)),
                ("date_due", models.DateField()),
                (
                    "status",
                    models.CharField(
                        choices=[("draft", "Draft"), ("pending", "Pending"), ("paid", "Paid")], default="draft", max_length=10
                    ),
                ),
                ("status_updated_at", models.DateTimeField(auto_now_add=True)),
                ("client_to", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.client")),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                ("items", models.ManyToManyField(blank=True, to="backend.invoiceitem")),
                (
                    "invoice_recurring_profile",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generated_invoices",
                        to="backend.invoicerecurringprofile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="InvoiceReminder",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("boto_schedule_arn", models.CharField(blank=True, max_length=2048, null=True)),
                ("boto_schedule_uuid", models.UUIDField(blank=True, default=None, null=True)),
                ("boto_last_updated", models.DateTimeField(auto_now=True)),
                ("received", models.BooleanField(default=False)),
                (
                    "boto_schedule_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("creating", "Creating"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("deleting", "Deleting"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=100,
                    ),
                ),
                ("days", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "reminder_type",
                    models.CharField(
                        choices=[("before_due", "Before Due"), ("after_due", "After Due"), ("on_overdue", "On Overdue")],
                        default="before_due",
                        max_length=100,
                    ),
                ),
                (
                    "invoice",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="invoice_reminders", to="backend.invoice"),
                ),
            ],
            options={
                "verbose_name": "Invoice Reminder",
                "verbose_name_plural": "Invoice Reminders",
            },
        ),
        migrations.CreateModel(
            name="InvoiceURL",
            fields=[
                ("expires", models.DateTimeField(blank=True, help_text="When the item will expire", null=True, verbose_name="Expires")),
                ("active", models.BooleanField(default=True)),
                (
                    "uuid",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet=None, length=8, max_length=8, prefix="", primary_key=True, serialize=False
                    ),
                ),
                ("system_created", models.BooleanField(default=False)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                (
                    "invoice",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name="invoice_urls", to="backend.invoice"),
                ),
            ],
            options={
                "verbose_name": "Invoice URL",
                "verbose_name_plural": "Invoice URLs",
            },
        ),
        migrations.CreateModel(
            name="MonthlyReportRow",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateField()),
                ("reference_number", models.CharField(max_length=100)),
                ("item_type", models.CharField(max_length=100)),
                ("client_name", models.CharField(blank=True, max_length=64, null=True)),
                ("paid_in", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ("paid_out", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ("client", models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.client")),
            ],
        ),
        migrations.CreateModel(
            name="MonthlyReport",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("name", models.CharField(blank=True, max_length=100, null=True)),
                ("profit", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ("invoices_sent", models.PositiveIntegerField(default=0)),
                ("start_date", models.DateField()),
                ("end_date", models.DateField()),
                ("recurring_customers", models.PositiveIntegerField(default=0)),
                ("payments_in", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ("payments_out", models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("GBP", "British Pound Sterling"),
                            ("EUR", "Euro"),
                            ("USD", "United States Dollar"),
                            ("JPY", "Japanese Yen"),
                            ("INR", "Indian Rupee"),
                            ("AUD", "Australian Dollar"),
                            ("CAD", "Canadian Dollar"),
                        ],
                        default="GBP",
                        max_length=3,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
                ("items", models.ManyToManyField(blank=True, to="backend.monthlyreportrow")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MultiFileUpload",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("finished_at", models.DateTimeField(blank=True, editable=False, null=True)),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("files", models.ManyToManyField(related_name="multi_file_uploads", to="backend.filestoragefile")),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Receipt",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100)),
                ("image", models.ImageField(storage=core.models._private_storage, upload_to="receipts")),
                ("total_price", models.FloatField(blank=True, null=True)),
                ("date", models.DateField(blank=True, null=True)),
                ("date_uploaded", models.DateTimeField(auto_now_add=True)),
                ("receipt_parsed", models.JSONField(blank=True, null=True)),
                ("merchant_store", models.CharField(blank=True, max_length=255, null=True)),
                ("purchase_category", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "organization",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="core.organization"),
                ),
                (
                    "user",
                    models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ReceiptDownloadToken",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("file", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="backend.receipt")),
                ("user", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name="filestoragefile",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_filestoragefile_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="financedefaultvalues",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_financedefaultvalues_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoiceproduct",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_invoiceproduct_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoicerecurringprofile",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_invoicerecurringprofile_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_invoice_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="monthlyreport",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_monthlyreport_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="multifileupload",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_multifileupload_check_user_or_organization",
            ),
        ),
        migrations.AddConstraint(
            model_name="receipt",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("organization__isnull", False), ("user__isnull", True)),
                    models.Q(("organization__isnull", True), ("user__isnull", False)),
                    _connector="OR",
                ),
                name="backend_receipt_check_user_or_organization",
            ),
        ),
    ]
